'use strict';

function getPathForType(type, name) {
  let currentPath = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];


  var currentKind = type.meta.kind;
  var dot = '';
  if (currentPath) dot = '.';

  switch (currentKind) {
    case 'struct':
      var paths = [];

      for (var key in type.meta.props) {
        var value = type.meta.props[key];
        paths = paths.concat(getPathForType(value, name, dot.concat(key)));
      }

      return paths;

    case 'maybe':
      return getPathForType(type.mea.type, name, "".concat(currentPath));

    case 'list':
      return getPathForType(type.meta.type, name, dot.concat('0'));

    case 'irreductible':
    case 'subtype':
      if (type.meta.name === name) return [{ path: "" + currentPath, type: type }];else return [];

    default:
      throw new Error(`Type unsupported ${ currentKind }`);
  }
}

module.exports = getPathForType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXRfcGF0aF9mb3JfdHlwZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVMsY0FBVCxDQUF5QixJQUF6QixFQUErQixJQUEvQixFQUF1RDtNQUFsQixvRUFBYyxrQkFBSTs7O0FBRXJELE1BQUksY0FBYyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBRm1DO0FBR3JELE1BQUksTUFBTSxFQUFOLENBSGlEO0FBSXJELE1BQUksV0FBSixFQUNFLE1BQU0sR0FBTixDQURGOztBQUdBLFVBQVEsV0FBUjtBQUNFLFNBQUssUUFBTDtBQUNFLFVBQUksUUFBUSxFQUFSLENBRE47O0FBR0UsV0FBSyxJQUFJLEdBQUosSUFBVyxLQUFLLElBQUwsQ0FBVSxLQUFWLEVBQWlCO0FBQy9CLFlBQUksUUFBUSxLQUFLLElBQUwsQ0FBVSxLQUFWLENBQWdCLEdBQWhCLENBQVIsQ0FEMkI7QUFFL0IsZ0JBQVEsTUFBTSxNQUFOLENBQWEsZUFBZSxLQUFmLEVBQXNCLElBQXRCLEVBQTRCLElBQUksTUFBSixDQUFXLEdBQVgsQ0FBNUIsQ0FBYixDQUFSLENBRitCO09BQWpDOztBQUtBLGFBQU8sS0FBUCxDQVJGOztBQURGLFNBV08sT0FBTDtBQUNFLGFBQU8sZUFBZSxLQUFLLEdBQUwsQ0FBUyxJQUFULEVBQWUsSUFBOUIsRUFBb0MsR0FBRyxNQUFILENBQVUsV0FBVixDQUFwQyxDQUFQLENBREY7O0FBWEYsU0FjTyxNQUFMO0FBQ0UsYUFBTyxlQUFlLEtBQUssSUFBTCxDQUFVLElBQVYsRUFBZ0IsSUFBL0IsRUFBc0MsSUFBSSxNQUFKLENBQVcsR0FBWCxDQUF0QyxDQUFQLENBREY7O0FBZEYsU0FpQk8sY0FBTCxDQWpCRjtBQWtCRSxTQUFLLFNBQUw7QUFDRSxVQUFJLEtBQUssSUFBTCxDQUFVLElBQVYsS0FBbUIsSUFBbkIsRUFDRixPQUFPLENBQUMsRUFBQyxNQUFNLEtBQUssV0FBTCxFQUFrQixVQUF6QixFQUFELENBQVAsQ0FERixLQUdFLE9BQU8sRUFBUCxDQUhGOztBQW5CSjtBQXlCSSxZQUFNLElBQUksS0FBSixDQUFVLENBQUMsaUJBQUQsR0FBb0IsV0FBcEIsRUFBZ0MsQ0FBMUMsQ0FBTixDQURGO0FBeEJGLEdBUHFEO0NBQXZEOztBQW9DQSxPQUFPLE9BQVAsR0FBaUIsY0FBakIiLCJmaWxlIjoiZ2V0X3BhdGhfZm9yX3R5cGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRQYXRoRm9yVHlwZSAodHlwZSwgbmFtZSwgY3VycmVudFBhdGggPSAnJykge1xuXG4gIHZhciBjdXJyZW50S2luZCA9IHR5cGUubWV0YS5raW5kXG4gIHZhciBkb3QgPSAnJ1xuICBpZiAoY3VycmVudFBhdGgpXG4gICAgZG90ID0gJy4nXG5cbiAgc3dpdGNoIChjdXJyZW50S2luZCkge1xuICAgIGNhc2UgJ3N0cnVjdCc6XG4gICAgICB2YXIgcGF0aHMgPSBbXVxuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdHlwZS5tZXRhLnByb3BzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHR5cGUubWV0YS5wcm9wc1trZXldXG4gICAgICAgIHBhdGhzID0gcGF0aHMuY29uY2F0KGdldFBhdGhGb3JUeXBlKHZhbHVlLCBuYW1lLCBkb3QuY29uY2F0KGtleSkpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGF0aHNcblxuICAgIGNhc2UgJ21heWJlJzpcbiAgICAgIHJldHVybiBnZXRQYXRoRm9yVHlwZSh0eXBlLm1lYS50eXBlLCBuYW1lLCBcIlwiLmNvbmNhdChjdXJyZW50UGF0aCkpXG5cbiAgICBjYXNlICdsaXN0JzpcbiAgICAgIHJldHVybiBnZXRQYXRoRm9yVHlwZSh0eXBlLm1ldGEudHlwZSwgbmFtZSwgKGRvdC5jb25jYXQoJzAnKSkpXG5cbiAgICBjYXNlICdpcnJlZHVjdGlibGUnOlxuICAgIGNhc2UgJ3N1YnR5cGUnOlxuICAgICAgaWYgKHR5cGUubWV0YS5uYW1lID09PSBuYW1lKVxuICAgICAgICByZXR1cm4gW3twYXRoOiBcIlwiICsgY3VycmVudFBhdGgsIHR5cGV9XVxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gW11cblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgdW5zdXBwb3J0ZWQgJHtjdXJyZW50S2luZH1gKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UGF0aEZvclR5cGVcbiJdfQ==