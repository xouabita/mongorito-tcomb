'use strict';

function getPathForType(type, name) {
  let currentPath = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];


  var currentKind = type.meta.kind;
  var dot = '';
  if (currentPath) dot = currentPath.concat('.');

  switch (currentKind) {
    case 'struct':
      var paths = [];

      for (var key in type.meta.props) {
        var value = type.meta.props[key];
        paths = paths.concat(getPathForType(value, name, dot.concat(key)));
      }

      return paths;

    case 'maybe':
      return getPathForType(type.meta.type, name, "".concat(currentPath));

    case 'list':
      return getPathForType(type.meta.type, name, dot.concat('0'));

    case 'irreducible':
    case 'subtype':
      if (type.meta.name === name) return [{ path: "" + currentPath, type: type }];else return [];

    default:
      throw new Error(`Type unsupported ${ currentKind }`);
  }
}

module.exports = getPathForType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXRfcGF0aF9mb3JfdHlwZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFNBQVMsY0FBVCxDQUF5QixJQUF6QixFQUErQixJQUEvQixFQUF1RDtNQUFsQixvRUFBYyxrQkFBSTs7O0FBRXJELE1BQUksY0FBYyxLQUFLLElBQUwsQ0FBVSxJQUFWLENBRm1DO0FBR3JELE1BQUksTUFBTSxFQUFOLENBSGlEO0FBSXJELE1BQUksV0FBSixFQUNFLE1BQU0sWUFBWSxNQUFaLENBQW1CLEdBQW5CLENBQU4sQ0FERjs7QUFHQSxVQUFRLFdBQVI7QUFDRSxTQUFLLFFBQUw7QUFDRSxVQUFJLFFBQVEsRUFBUixDQUROOztBQUdFLFdBQUssSUFBSSxHQUFKLElBQVcsS0FBSyxJQUFMLENBQVUsS0FBVixFQUFpQjtBQUMvQixZQUFJLFFBQVEsS0FBSyxJQUFMLENBQVUsS0FBVixDQUFnQixHQUFoQixDQUFSLENBRDJCO0FBRS9CLGdCQUFRLE1BQU0sTUFBTixDQUFhLGVBQWUsS0FBZixFQUFzQixJQUF0QixFQUE0QixJQUFJLE1BQUosQ0FBVyxHQUFYLENBQTVCLENBQWIsQ0FBUixDQUYrQjtPQUFqQzs7QUFLQSxhQUFPLEtBQVAsQ0FSRjs7QUFERixTQVdPLE9BQUw7QUFDRSxhQUFPLGVBQWUsS0FBSyxJQUFMLENBQVUsSUFBVixFQUFnQixJQUEvQixFQUFxQyxHQUFHLE1BQUgsQ0FBVSxXQUFWLENBQXJDLENBQVAsQ0FERjs7QUFYRixTQWNPLE1BQUw7QUFDRSxhQUFPLGVBQWUsS0FBSyxJQUFMLENBQVUsSUFBVixFQUFnQixJQUEvQixFQUFzQyxJQUFJLE1BQUosQ0FBVyxHQUFYLENBQXRDLENBQVAsQ0FERjs7QUFkRixTQWlCTyxhQUFMLENBakJGO0FBa0JFLFNBQUssU0FBTDtBQUNFLFVBQUksS0FBSyxJQUFMLENBQVUsSUFBVixLQUFtQixJQUFuQixFQUNGLE9BQU8sQ0FBQyxFQUFDLE1BQU0sS0FBSyxXQUFMLEVBQWtCLFVBQXpCLEVBQUQsQ0FBUCxDQURGLEtBR0UsT0FBTyxFQUFQLENBSEY7O0FBbkJKO0FBeUJJLFlBQU0sSUFBSSxLQUFKLENBQVUsQ0FBQyxpQkFBRCxHQUFvQixXQUFwQixFQUFnQyxDQUExQyxDQUFOLENBREY7QUF4QkYsR0FQcUQ7Q0FBdkQ7O0FBb0NBLE9BQU8sT0FBUCxHQUFpQixjQUFqQiIsImZpbGUiOiJnZXRfcGF0aF9mb3JfdHlwZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGdldFBhdGhGb3JUeXBlICh0eXBlLCBuYW1lLCBjdXJyZW50UGF0aCA9ICcnKSB7XG5cbiAgdmFyIGN1cnJlbnRLaW5kID0gdHlwZS5tZXRhLmtpbmRcbiAgdmFyIGRvdCA9ICcnXG4gIGlmIChjdXJyZW50UGF0aClcbiAgICBkb3QgPSBjdXJyZW50UGF0aC5jb25jYXQoJy4nKVxuXG4gIHN3aXRjaCAoY3VycmVudEtpbmQpIHtcbiAgICBjYXNlICdzdHJ1Y3QnOlxuICAgICAgdmFyIHBhdGhzID0gW11cblxuICAgICAgZm9yICh2YXIga2V5IGluIHR5cGUubWV0YS5wcm9wcykge1xuICAgICAgICB2YXIgdmFsdWUgPSB0eXBlLm1ldGEucHJvcHNba2V5XVxuICAgICAgICBwYXRocyA9IHBhdGhzLmNvbmNhdChnZXRQYXRoRm9yVHlwZSh2YWx1ZSwgbmFtZSwgZG90LmNvbmNhdChrZXkpKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGhzXG5cbiAgICBjYXNlICdtYXliZSc6XG4gICAgICByZXR1cm4gZ2V0UGF0aEZvclR5cGUodHlwZS5tZXRhLnR5cGUsIG5hbWUsIFwiXCIuY29uY2F0KGN1cnJlbnRQYXRoKSlcblxuICAgIGNhc2UgJ2xpc3QnOlxuICAgICAgcmV0dXJuIGdldFBhdGhGb3JUeXBlKHR5cGUubWV0YS50eXBlLCBuYW1lLCAoZG90LmNvbmNhdCgnMCcpKSlcblxuICAgIGNhc2UgJ2lycmVkdWNpYmxlJzpcbiAgICBjYXNlICdzdWJ0eXBlJzpcbiAgICAgIGlmICh0eXBlLm1ldGEubmFtZSA9PT0gbmFtZSlcbiAgICAgICAgcmV0dXJuIFt7cGF0aDogXCJcIiArIGN1cnJlbnRQYXRoLCB0eXBlfV1cbiAgICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIFtdXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUeXBlIHVuc3VwcG9ydGVkICR7Y3VycmVudEtpbmR9YClcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFBhdGhGb3JUeXBlXG4iXX0=